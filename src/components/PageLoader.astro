---
// Componente de carga entre páginas
---

<div id="page-loader" class="page-loader">
    <div class="loader-container">
        <div class="logo-spinner">
            <img src="/favicon.png" alt="Loading..." class="spinning-logo">
        </div>
        <div class="loading-text">
            <span class="loading-dots">
                <span class="dot">.</span>
                <span class="dot">.</span>
                <span class="dot">.</span>
            </span>
        </div>
    </div>
</div>

<style>
    .page-loader {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(57, 57, 57, 0.95);
        backdrop-filter: blur(5px);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .page-loader.active {
        display: flex;
        opacity: 1;
    }

    .loader-container {
        text-align: center;
        color: white;
    }

    .logo-spinner {
        margin-bottom: 2rem;
        position: relative;
    }

    .spinning-logo {
        width: 60px;
        height: 60px;
        animation: spin 1.5s linear infinite;
        filter: drop-shadow(0 0 15px rgba(202, 1, 1, 0.4));
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .loading-text {
        margin-top: 1rem;
        text-align: center;
    }

    .loading-dots {
        display: inline-block;
    }

    .dot {
        display: inline-block;
        width: 8px;
        height: 8px;
        background: #CA0101;
        border-radius: 50%;
        margin: 0 3px;
        animation: dotBounce 1.4s infinite ease-in-out;
    }

    .dot:nth-child(1) { animation-delay: -0.32s; }
    .dot:nth-child(2) { animation-delay: -0.16s; }
    .dot:nth-child(3) { animation-delay: 0s; }

    @keyframes dotBounce {
        0%, 80%, 100% {
            transform: scale(0.3);
            opacity: 0.3;
        }
        40% {
            transform: scale(1);
            opacity: 1;
        }
    }



    /* Responsive */
    @media (max-width: 768px) {
        .spinning-logo {
            width: 50px;
            height: 50px;
        }
    }
</style>

<script>
    class PageLoader {
        constructor() {
            this.loader = document.getElementById('page-loader');
            this.isLoading = false;
            this.init();
        }

        init() {
            // Interceptar navegación
            this.interceptNavigation();
            
            // Mostrar loader en navegación del navegador (back/forward)
            window.addEventListener('popstate', () => {
                this.show();
            });
        }

        interceptNavigation() {
            // Interceptar clics en enlaces de navegación
            document.addEventListener('click', (e) => {
                const link = e.target.closest('a');
                if (link && link.href && !link.href.startsWith('javascript:') && !link.href.startsWith('#')) {
                    const href = link.href;
                    const currentOrigin = window.location.origin;
                    
                    // Solo interceptar enlaces internos
                    if (href.startsWith(currentOrigin)) {
                        e.preventDefault();
                        this.navigateTo(href);
                    }
                }
            });
        }

        async navigateTo(url) {
            this.show();
            
            try {
                // Simular tiempo de carga mínimo para mejor UX
                await this.delay(600);
                
                // Navegar a la nueva página
                window.location.href = url;
            } catch (error) {
                console.error('Error en navegación:', error);
                this.hide();
            }
        }

        show() {
            if (this.isLoading) return;
            
            this.isLoading = true;
            this.loader.classList.add('active');
            
            // Ocultar el loader después de un tiempo máximo
            setTimeout(() => {
                this.hide();
            }, 5000);
        }

        hide() {
            this.isLoading = false;
            this.loader.classList.remove('active');
        }

        delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
    }

    // Inicializar cuando el DOM esté listo
    document.addEventListener('DOMContentLoaded', () => {
        new PageLoader();
    });
</script>
